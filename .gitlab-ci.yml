# TODO: Сбилдить и запушить можно все пачкой через docker-compose

# Кеширует папки между этапами
cache:
  key: "$CI_BUILD_REF_NAME node:10-alpine"
  paths:
    - node_modules/

# использование драйвера хранилища Docker overlay2 вместо драйвера vfs
variables:
  DOCKER_DRIVER: overlay2

stages:
  # Делаем сборку
  - build
  # Генерим докер-образ и пушим в регистр
  - release
  # Заходим на сервер, обновляем и запускаем образ
  - deploy

build:
  stage: build
  image: node:10-alpine
  only:
    - master
  script:
    - npm i
    - npm run build
  artifacts:
    paths:
     - dist/

release_bot:
  stage: release
  image: docker:latest
  only:
    - "master"
  services:
    - docker:dind
  before_script:
    # Пишет энвы на сервер
    - chmod +x setup_env.sh
    - ./setup_env.sh
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker build --pull -t ${CI_REGISTRY}/${CI_PROJECT_PATH}/stocks_bot:v1 ."
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}/stocks_bot:v1"
    - npm run db-migration:up
  after_script:
    - "docker logout ${CI_REGISTRY}"

deploy:
  stage: deploy
  image: ubuntu:18.04
  only:
    - "master"
  environment: production
  services:
    - docker:dind
  before_script:
    # install ssh ageng if it's not
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    # Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    # configure ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

    - apt-get install -y -qq sshpass
  script:
    # Удяляет контейнеры, возрастом больше 14 дней
    - sshpass ssh $USER@$HOST 'docker image prune --filter "until=336h" -f'

    - sshpass ssh $USER@$HOST "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"

    # Идет в папку проекта/создаем ее, пишет и запускает конфиг docker-compose
    # '|| true' - благодаря этому стейдж не крашится если операция не прошла
    - sshpass ssh $USER@$HOST 'mkdir -p /root/projects && mkdir -p /root/projects/stocks && rm /root/projects/stocks/docker-compose.yml || true'

    # Скопировать конфиг на виртуалку
    - sshpass scp -r docker-compose-remote.yml $USER@$HOST:/root/projects/stocks/docker-compose.yml
    - sshpass ssh $USER@$HOST 'cd /root/projects/stocks && ls && docker-compose pull && docker-compose up -d --build --force-recreate'
